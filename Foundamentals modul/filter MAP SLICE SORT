Какво прави?: filter() създава нов масив, съдържащ само елементите, които отговарят на определено условие.
Защо го използваме?: В задачата трябва да открием числата, които са по-големи от средното аритметично. Използваме filter(), за да отсеем само тези числа от оригиналния масив.
Пример:
javascript
Copy code
let numbers = [5, 30, 40, 50, 60];
let filtered = numbers.filter(n => n > 28.08);  // Взимаме числа > 28.08
console.log(filtered);  // [30, 40, 50, 60]



MAP

map()
Какво прави?: map() трансформира всеки елемент от масива, създавайки нов масив.
Защо го използваме?: В нашия случай използваме map() за да преобразуваме всеки елемент от масива от текст към число (тъй като след разделянето с split() числата са текстови низове).
Пример:
javascript
Copy code
let numbers = ['5', '30', '40'];
let mapped = numbers.map(Number);  // Преобразуваме '5' в 5, '30' в 30 и т.н.
console.log(mapped);  // [5, 30, 40]


sort()
Какво прави?: sort() сортира елементите в масива. По подразбиране сортира в азбучен ред, затова за числово сортиране използваме специална функция за сравнение.
Защо го използваме?: След като филтрираме числата, искаме да ги подредим по големина в низходящ ред (от най-голямото към най-малкото), затова използваме sort((a, b) => b - a).
Пример:
javascript
Copy code
let numbers = [5, 30, 40, 50, 60];
let sorted = numbers.sort((a, b) => b - a);  // Сортираме в низходящ ред
console.log(sorted);  // [60, 50, 40, 30, 5]


Отличен въпрос! Нека обясня защо при sort() функцията за сравнение използва аргументите a и b и как работи това.

Какво представлява функцията за сравнение в sort()?
Когато използваш sort() в JavaScript, можеш да подадеш на функцията функция за сравнение (callback), която определя реда на елементите. Тази функция приема два аргумента (в нашия случай наречени a и b), които представляват два произволни елемента от масива, които ще бъдат сравнени един с друг.

Как работи sort():
a и b са два елемента от масива, които се подават последователно за сравнение. Например, ако имаш масив [40, 100, 1, 5, 25, 10], при сортиране, JavaScript ще подаде различни двойки елементи към функцията за сравнение (например a = 40 и b = 100, след това a = 1 и b = 5, и т.н.).

Функцията за сравнение трябва да върне:

Отрицателна стойност (напр. -1), ако a трябва да е преди b.
Положителна стойност (напр. 1), ако a трябва да е след b.
0, ако a и b са равни и не трябва да се променя техният ред.
Защо b - a?
Когато използваме b - a, ние казваме на функцията:

Ако b е по-голямо от a, резултатът от b - a ще е положителен (напр. 60 - 30 = 30), което означава, че b трябва да бъде преди a. Това създава низходящ ред.
Ако a е по-голямо от b, резултатът ще е отрицателен (напр. 30 - 60 = -30), което означава, че a трябва да е преди b.
Ако a и b са равни, резултатът ще бъде 0, и редът между тях няма да бъде променен.
Пример:
javascript
Copy code
let numbers = [40, 100, 1, 5, 25, 10];

// Сортираме в низходящ ред с b - a
numbers.sort((a, b) => b - a);
console.log(numbers);  // [100, 40, 25, 10, 5, 1